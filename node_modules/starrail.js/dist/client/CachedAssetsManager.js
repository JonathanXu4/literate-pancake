"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const axios_1 = require("axios");
const unzip_stream_1 = __importDefault(require("unzip-stream"));
const config_file_js_1 = require("config_file.js");
const axios_utils_1 = require("../utils/axios_utils");
const ObjectKeysManager_1 = __importDefault(require("./ObjectKeysManager"));
const hash_utils_1 = require("../utils/hash_utils");
const languages = ["chs", "cht", "de", "en", "es", "fr", "id", "jp", "kr", "pt", "ru", "th", "vi"];
let dataMemory = {};
const initialLangDataMemory = { chs: null, cht: null, de: null, en: null, es: null, fr: null, id: null, jp: null, kr: null, pt: null, ru: null, th: null, vi: null };
let langDataMemory = Object.assign({}, initialLangDataMemory);
let objectKeysManager;
// Thanks @Dimbreath
const contentBaseUrl = "https://raw.githubusercontent.com/Dimbreath/StarRailData/master";
const contents = [
    "AvatarConfig",
    "ItemConfigAvatar",
    "DamageType",
    "AvatarBaseType",
    "AvatarSkillConfig",
    "AvatarSkillTreeConfig",
    "AvatarRankConfig",
    "AvatarPromotionConfig",
    "EquipmentConfig",
    "ItemConfigEquipment",
    "EquipmentExpType",
    "EquipmentSkillConfig",
    "EquipmentPromotionConfig",
    "RelicConfig",
    "ItemConfigRelic",
    "RelicExpType",
    "RelicMainAffixConfig",
    "RelicSubAffixConfig",
    "RelicSetConfig",
    "RelicSetSkillConfig",
    "RelicBaseType",
    "AvatarPropertyConfig",
    // Character Icon for a player
    "ItemConfigAvatarPlayerIcon",
    "AvatarPlayerIcon",
    // Other Icon for a player
    "ItemPlayerCard",
    "PlayerIcon",
];
const textMapWhiteList = [];
const getGitRemoteAPIUrl = (useRawStarRailData, rawDate, date) => useRawStarRailData
    ? `https://api.github.com/repos/Dimbreath/StarRailData/commits?sha=master&since=${rawDate.toISOString()}`
    : `https://api.github.com/repos/yuko1101/starrail.js/commits?sha=main&path=cache.zip&since=${date.toISOString()}`;
/**
 * @en CachedAssetsManager
 */
class CachedAssetsManager {
    /**
     * @param client
    */
    constructor(client) {
        var _a;
        this.client = client;
        this.defaultCacheDirectoryPath = path_1.default.resolve(__dirname, "..", "..", "cache");
        this._contentsSrc = contents;
        this._langs = languages;
        this.cacheDirectoryPath = (_a = client.options.cacheDirectory) !== null && _a !== void 0 ? _a : this.defaultCacheDirectoryPath;
        this._cacheUpdater = null;
        this._githubCache = null;
        this._isFetching = false;
    }
    /** Create the necessary folders and files, and if the directory [cacheDirectoryPath](#cacheDirectoryPath) did not exist, move the cache files from the default path. */
    async cacheDirectorySetup() {
        if (!fs_1.default.existsSync(this.cacheDirectoryPath)) {
            fs_1.default.mkdirSync(this.cacheDirectoryPath);
            const defaultCacheFiles = fs_1.default.readdirSync(this.defaultCacheDirectoryPath);
            if (defaultCacheFiles.length > 0) {
                try {
                    (0, config_file_js_1.move)(this.defaultCacheDirectoryPath, this.cacheDirectoryPath);
                }
                catch (e) {
                    console.error(`Auto-Moving cache data failed with error: ${e}`);
                }
            }
        }
        if (!fs_1.default.existsSync(path_1.default.resolve(this.cacheDirectoryPath, "data"))) {
            fs_1.default.mkdirSync(path_1.default.resolve(this.cacheDirectoryPath, "data"));
        }
        if (!fs_1.default.existsSync(path_1.default.resolve(this.cacheDirectoryPath, "langs"))) {
            fs_1.default.mkdirSync(path_1.default.resolve(this.cacheDirectoryPath, "langs"));
        }
        if (!fs_1.default.existsSync(path_1.default.resolve(this.cacheDirectoryPath, "github"))) {
            fs_1.default.mkdirSync(path_1.default.resolve(this.cacheDirectoryPath, "github"));
        }
        const githubCachePath = path_1.default.resolve(this.cacheDirectoryPath, "github", "starrail_data.json");
        if (!fs_1.default.existsSync(githubCachePath) || !this._githubCache) {
            this._githubCache = await new config_file_js_1.ConfigFile(githubCachePath, {
                "lastUpdate": 0,
                "rawLastUpdate": 0,
            }).load();
        }
    }
    /** Obtains a text map for a specific language. */
    async fetchLanguageData(lang) {
        await this.cacheDirectorySetup();
        const url = `${contentBaseUrl}/TextMap/TextMap${lang.toUpperCase()}.json`;
        const json = (await (0, axios_utils_1.fetchJSON)(url, this.client)).data;
        return json;
    }
    /**
     * @param useRawStarRailData Whether to fetch from github repo ({@link https://github.com/Dimbreath/StarRailData}) instead of downloading cache.zip
     * @returns Whether the game data update is available or not.
     */
    async checkForUpdates(useRawStarRailData = false) {
        var _a, _b, _c, _d;
        await this.cacheDirectorySetup();
        const url = getGitRemoteAPIUrl(useRawStarRailData, new Date((_b = (_a = this._githubCache) === null || _a === void 0 ? void 0 : _a.getValue("rawLastUpdate")) !== null && _b !== void 0 ? _b : 0), new Date((_d = (_c = this._githubCache) === null || _c === void 0 ? void 0 : _c.getValue("lastUpdate")) !== null && _d !== void 0 ? _d : 0));
        const res = await (0, axios_utils_1.fetchJSON)(url, this.client);
        if (res.status !== 200) {
            throw new Error("Request Failed");
        }
        const data = res.data;
        return data.length !== 0;
    }
    /**
     * @param options.useRawStarRailData Whether to fetch from github repo ({@link https://github.com/Dimbreath/StarRailData}) instead of downloading cache.zip
     * @param options.ghproxy Whether to use ghproxy.com
     */
    async fetchAllContents(options) {
        var _a, _b;
        if (this._isFetching) {
            throw new Error("You are already fetching assets.");
        }
        options = (0, config_file_js_1.bindOptions)({
            useRawStarRailData: false,
        }, options);
        await this.cacheDirectorySetup();
        this._isFetching = true;
        if (!options.useRawStarRailData) {
            if (this.client.options.showFetchCacheLog) {
                console.info("Downloading cache.zip...");
            }
            await this._downloadCacheZip();
            await ((_a = this._githubCache) === null || _a === void 0 ? void 0 : _a.set("lastUpdate", Date.now()).save());
            if (this.client.options.showFetchCacheLog) {
                console.info("Download completed");
            }
        }
        else {
            if (this.client.options.showFetchCacheLog) {
                console.info("Downloading structure data files...");
            }
            const promises = [];
            const excelOutputData = {};
            for (const content of contents) {
                const fileName = `${content}.json`;
                const url = `${contentBaseUrl}/ExcelOutput/${fileName}`;
                promises.push((async () => {
                    const json = (await (0, axios_utils_1.fetchJSON)(url, this.client)).data;
                    if (this.client.options.showFetchCacheLog) {
                        console.info(`Downloaded data/${fileName}`);
                    }
                    excelOutputData[content] = json;
                })());
            }
            await Promise.all(promises);
            if (this.client.options.showFetchCacheLog) {
                console.info("> Downloaded all structure data files");
                console.info("Downloading language files...");
            }
            const langsData = Object.assign({}, initialLangDataMemory);
            const langPromises = [];
            for (const lang of languages) {
                langPromises.push((async () => {
                    const data = await this.fetchLanguageData(lang);
                    if (this.client.options.showFetchCacheLog) {
                        console.info(`Downloaded langs/${lang}.json`);
                    }
                    langsData[lang] = data;
                })());
            }
            await Promise.all(langPromises);
            if (this.client.options.showFetchCacheLog) {
                console.info("> Downloaded all language files");
                console.info("Parsing data... (This may take more than 10 minutes)");
            }
            const clearLangsData = this.removeUnusedTextData(excelOutputData, langsData);
            if (this.client.options.showFetchCacheLog) {
                console.info("> Parsing completed");
                console.info("Saving into files...");
            }
            for (const lang of Object.keys(clearLangsData)) {
                fs_1.default.writeFileSync(path_1.default.resolve(this.cacheDirectoryPath, "langs", `${lang}.json`), JSON.stringify(clearLangsData[lang]));
            }
            for (const key in excelOutputData) {
                fs_1.default.writeFileSync(path_1.default.resolve(this.cacheDirectoryPath, "data", `${key}.json`), JSON.stringify(excelOutputData[key]));
            }
            await ((_b = this._githubCache) === null || _b === void 0 ? void 0 : _b.set("rawLastUpdate", Date.now()).save());
            if (this.client.options.showFetchCacheLog) {
                console.info(">> All Completed");
            }
        }
        this._isFetching = false;
    }
    /**
     * @returns whether all StarRail cache data files exist.
     */
    hasAllContents() {
        for (const lang of languages) {
            if (!fs_1.default.existsSync(path_1.default.resolve(this.cacheDirectoryPath, "langs", `${lang}.json`)))
                return false;
        }
        for (const content of contents) {
            const fileName = `${content}.json`;
            if (!fs_1.default.existsSync(path_1.default.resolve(this.cacheDirectoryPath, "data", fileName)))
                return false;
        }
        return true;
    }
    /**
     * @param options.useRawStarRailData Whether to fetch from github repo ({@link https://github.com/Dimbreath/StarRailData}) instead of downloading cache.zip
     * @param options.ghproxy Whether to use ghproxy.com
     * @returns true if there were any updates, false if there were no updates.
     */
    async updateContents(options = {}) {
        var _a, _b, _c, _d, _e, _f;
        options = (0, config_file_js_1.bindOptions)({
            useRawStarRailData: false,
            ghproxy: false,
            onUpdateStart: null,
            onUpdateEnd: null,
        }, options);
        await this.cacheDirectorySetup();
        const url = getGitRemoteAPIUrl(!!options.useRawStarRailData, new Date(((_b = (_a = this._githubCache) === null || _a === void 0 ? void 0 : _a.getValue("rawLastUpdate")) !== null && _b !== void 0 ? _b : 0)), new Date(((_d = (_c = this._githubCache) === null || _c === void 0 ? void 0 : _c.getValue("lastUpdate")) !== null && _d !== void 0 ? _d : 0)));
        const res = await (0, axios_utils_1.fetchJSON)(url, this.client);
        if (res.status !== 200) {
            throw new Error("Request Failed");
        }
        const data = res.data;
        if (data.length !== 0) {
            await ((_e = options.onUpdateStart) === null || _e === void 0 ? void 0 : _e.call(options));
            // fetch all because large file diff cannot be retrieved
            await this.fetchAllContents({ useRawStarRailData: options.useRawStarRailData, ghproxy: options.ghproxy });
            await ((_f = options.onUpdateEnd) === null || _f === void 0 ? void 0 : _f.call(options));
        }
    }
    /**
     * @param options.useRawStarRailData Whether to fetch from github repo ({@link https://github.com/Dimbreath/StarRailData}) instead of downloading cache.zip
     * @param options.ghproxy Whether to use ghproxy.com
     * @param options.timeout in milliseconds
     */
    activateAutoCacheUpdater(options = {}) {
        options = (0, config_file_js_1.bindOptions)({
            useRawStarRailData: false,
            instant: true,
            ghproxy: false,
            timeout: 60 * 60 * 1000,
            onUpdateStart: null,
            onUpdateEnd: null,
            onError: null,
        }, options);
        if (options.timeout < 60 * 1000)
            throw new Error("timeout cannot be shorter than 1 minute.");
        if (options.instant)
            this.updateContents({ onUpdateStart: options.onUpdateStart, onUpdateEnd: options.onUpdateEnd, useRawStarRailData: options.useRawStarRailData, ghproxy: options.ghproxy });
        this._cacheUpdater = setInterval(async () => {
            var _a;
            if (this._isFetching)
                return;
            try {
                this.updateContents({ onUpdateStart: options.onUpdateStart, onUpdateEnd: options.onUpdateEnd, useRawStarRailData: options.useRawStarRailData, ghproxy: options.ghproxy });
            }
            catch (e) {
                if (e instanceof Error)
                    (_a = options.onError) === null || _a === void 0 ? void 0 : _a.call(options, e);
            }
        }, options.timeout);
    }
    /**
     * Disables the updater activated by [activateAutoCacheUpdater](#activateAutoCacheUpdater)
     */
    deactivateAutoCacheUpdater() {
        if (this._cacheUpdater !== null) {
            clearInterval(this._cacheUpdater);
            this._cacheUpdater = null;
        }
    }
    /**
     * @param lang
     * @returns text map file path for a specific language
     */
    getLanguageDataPath(lang) {
        return path_1.default.resolve(this.cacheDirectoryPath, "langs", `${lang}.json`);
    }
    /**
     * @param name without extensions (.json)
     * @returns excel bin file path
     */
    getJSONDataPath(name) {
        return path_1.default.resolve(this.cacheDirectoryPath, "data", `${name}.json`);
    }
    /**
     * @param name without extensions (.json)
     */
    getStarRailCacheData(name) {
        if (!Object.keys(dataMemory).includes(name)) {
            dataMemory[name] = JSON.parse(fs_1.default.readFileSync(this.getJSONDataPath(name), "utf-8"));
        }
        return dataMemory[name];
    }
    /**
     * @param lang
     * @returns text map for a specific language
     */
    getLanguageData(lang) {
        var _a, _b;
        (_a = langDataMemory[lang]) !== null && _a !== void 0 ? _a : (langDataMemory[lang] = JSON.parse(fs_1.default.readFileSync(this.getLanguageDataPath(lang), "utf-8")));
        return (_b = langDataMemory[lang]) !== null && _b !== void 0 ? _b : {};
    }
    /**
     * @returns ObjectKeysManager of this
     */
    getObjectKeysManager() {
        if (!objectKeysManager)
            objectKeysManager = new ObjectKeysManager_1.default(this);
        return objectKeysManager;
    }
    /**
     * Clean memory of cache data.
     * Then reload data that was loaded before the clean if `reload` is true.
     * If `reload` is false, load each file as needed.
     */
    refreshAllData(reload = false) {
        const loadedData = reload ? Object.keys(dataMemory) : null;
        const loadedLangs = reload ? Object.keys(langDataMemory) : null;
        dataMemory = {};
        langDataMemory = Object.assign({}, initialLangDataMemory);
        objectKeysManager = null;
        if (reload && loadedData && loadedLangs) {
            for (const name of loadedData) {
                this.getStarRailCacheData(name);
            }
            for (const lang of loadedLangs) {
                this.getLanguageData(lang);
            }
            objectKeysManager = new ObjectKeysManager_1.default(this);
        }
    }
    /**
     * Remove all unused text map entries
     * @param data
     * @param langsData
     */
    removeUnusedTextData(data, langsData, showLog = true) {
        const required = [];
        function push(...keys) {
            const len = keys.length;
            for (let i = 0; i < len; i++) {
                const key = keys[i];
                if (!required.includes(key))
                    required.push(key);
            }
        }
        push(...textMapWhiteList);
        Object.values(data["AvatarConfig"]).forEach(c => {
            const json = new config_file_js_1.JsonReader(c);
            push(json.getAsNumber("AvatarName", "Hash"));
        });
        Object.values(data["ItemConfigAvatar"]).forEach(c => {
            const json = new config_file_js_1.JsonReader(c);
            push(json.getAsNumber("ItemBGDesc", "Hash"));
        });
        Object.values(data["DamageType"]).forEach(d => {
            const json = new config_file_js_1.JsonReader(d);
            push(json.getAsNumber("DamageTypeName", "Hash"), json.getAsNumber("DamageTypeIntro", "Hash"));
        });
        Object.values(data["AvatarBaseType"]).forEach(p => {
            const json = new config_file_js_1.JsonReader(p);
            push(json.getAsNumber("BaseTypeText", "Hash"), json.getAsNumber("BaseTypeDesc", "Hash"));
        });
        Object.values(data["AvatarSkillConfig"]).forEach(s => {
            Object.values(s).forEach(l => {
                const json = new config_file_js_1.JsonReader(l);
                push(json.getAsNumber("SkillName", "Hash"), json.getAsNumber("SkillTag", "Hash"), json.getAsNumber("SkillTypeDesc", "Hash"), json.getAsNumber("SkillDesc", "Hash"), json.getAsNumber("SimpleSkillDesc", "Hash"));
            });
        });
        Object.values(data["AvatarSkillTreeConfig"]).forEach(s => {
            Object.values(s).forEach(l => {
                const json = new config_file_js_1.JsonReader(l);
                const name = json.getAsString("PointName");
                if (name !== "")
                    push((0, hash_utils_1.getStableHash)(name));
                const description = json.getAsString("PointDesc");
                if (description !== "")
                    push((0, hash_utils_1.getStableHash)(description));
            });
        });
        Object.values(data["AvatarRankConfig"]).forEach(e => {
            const json = new config_file_js_1.JsonReader(e);
            push((0, hash_utils_1.getStableHash)(json.getAsString("Name")), (0, hash_utils_1.getStableHash)(json.getAsString("Desc")));
        });
        Object.values(data["EquipmentConfig"]).forEach(l => {
            const json = new config_file_js_1.JsonReader(l);
            push(json.getAsNumber("EquipmentName", "Hash"), json.getAsNumber("EquipmentDesc", "Hash"));
        });
        Object.values(data["ItemConfigEquipment"]).forEach(l => {
            const json = new config_file_js_1.JsonReader(l);
            push(json.getAsNumber("ItemBGDesc", "Hash"), json.getAsNumber("ItemDesc", "Hash"));
        });
        Object.values(data["EquipmentSkillConfig"]).forEach(s => {
            Object.values(s).forEach(l => {
                const json = new config_file_js_1.JsonReader(l);
                push(json.getAsNumber("SkillName", "Hash"), json.getAsNumber("SkillDesc", "Hash"));
            });
        });
        Object.values(data["ItemConfigRelic"]).forEach(r => {
            const json = new config_file_js_1.JsonReader(r);
            push(json.getAsNumber("ItemName", "Hash"), json.getAsNumber("ItemBGDesc", "Hash"));
        });
        Object.values(data["RelicSetConfig"]).forEach(s => {
            const json = new config_file_js_1.JsonReader(s);
            push(json.getAsNumber("SetName", "Hash"));
        });
        Object.values(data["RelicSetSkillConfig"]).forEach(s => {
            Object.values(s).forEach(b => {
                const json = new config_file_js_1.JsonReader(b);
                push((0, hash_utils_1.getStableHash)(json.getAsString("SkillDesc")));
            });
        });
        Object.values(data["RelicBaseType"]).forEach(t => {
            const json = new config_file_js_1.JsonReader(t);
            push(json.getAsNumber("BaseTypeText", "Hash"));
        });
        Object.values(data["AvatarPropertyConfig"]).forEach(s => {
            const json = new config_file_js_1.JsonReader(s);
            push(json.getAsNumber("PropertyName", "Hash"), json.getAsNumber("PropertyNameSkillTree", "Hash"), json.getAsNumber("PropertyNameRelic", "Hash"), json.getAsNumber("PropertyNameFilter", "Hash"));
        });
        [...Object.values(data["ItemConfigAvatarPlayerIcon"]), ...Object.values(data["ItemPlayerCard"])].forEach(i => {
            const json = new config_file_js_1.JsonReader(i);
            push(json.getAsNumber("ItemName", "Hash"));
        });
        const requiredStringKeys = required.filter(key => key).map(key => key.toString());
        if (showLog)
            console.info(`Required keys have been loaded (${requiredStringKeys.length.toLocaleString()} keys)`);
        const clearLangsData = Object.assign({}, initialLangDataMemory);
        const keyCount = requiredStringKeys.length;
        for (const lang of Object.keys(langsData)) {
            if (showLog)
                console.info(`Modifying language "${lang}"...`);
            clearLangsData[lang] = {};
            for (let i = 0; i < keyCount; i++) {
                const key = requiredStringKeys[i];
                const text = langsData[lang][key];
                if (text) {
                    clearLangsData[lang][key] = text;
                }
                else {
                    // console.warn(`Required key ${key} was not found in language ${lang}.`);
                }
            }
            // console.log(Object.keys(langData).length + " keys in " + lang);
            // console.log(Object.keys(clearLangsData).length + " langs");
        }
        if (showLog)
            console.info("Removing unused keys completed.");
        return clearLangsData;
    }
    /**
     * Download the zip file, which contains StarRail cache data, from {@link https://raw.githubusercontent.com/yuko1101/starrail.js/main/cache.zip}
     * @param options.ghproxy Whether to use ghproxy.com
     */
    async _downloadCacheZip(options = {}) {
        options = (0, config_file_js_1.bindOptions)({
            ghproxy: false,
        }, options);
        const axios = new axios_1.Axios({});
        const url = (options.ghproxy ? "https://ghproxy.com/" : "") + "https://raw.githubusercontent.com/yuko1101/starrail.js/main/cache.zip";
        const res = await axios.get(url, {
            responseType: "stream",
        }).catch(e => {
            throw new Error(`Failed to download StarRail data from ${url} with an error: ${e}`);
        });
        if (res.status == 200) {
            await new Promise(resolve => {
                res.data
                    .pipe(unzip_stream_1.default.Parse())
                    .on("entry", (entry) => {
                    const entryPath = entry.path.replace(/^cache\/?/, "");
                    const extractPath = path_1.default.resolve(this.cacheDirectoryPath, entryPath);
                    if (entry.type === "Directory") {
                        if (!fs_1.default.existsSync(extractPath))
                            fs_1.default.mkdirSync(extractPath, { recursive: true });
                        entry.autodrain();
                    }
                    else if (entryPath.startsWith("github/")) {
                        if (fs_1.default.existsSync(extractPath)) {
                            entry.autodrain();
                            return;
                        }
                        entry.pipe(fs_1.default.createWriteStream(extractPath));
                    }
                    else {
                        entry.pipe(fs_1.default.createWriteStream(extractPath));
                    }
                });
                res.data.on("close", () => {
                    resolve();
                });
            });
        }
        else {
            throw new Error(`Failed to download StarRail data from ${url} with status ${res.status} - ${res.statusText}`);
        }
    }
}
exports.default = CachedAssetsManager;
