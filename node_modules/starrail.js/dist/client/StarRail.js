"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultClientOption = void 0;
const config_file_js_1 = require("config_file.js");
const CachedAssetsManager_1 = __importDefault(require("./CachedAssetsManager"));
const CharacterData_1 = __importDefault(require("../models/character/CharacterData"));
const LightConeData_1 = __importDefault(require("../models/light_cone/LightConeData"));
const RelicData_1 = __importDefault(require("../models/relic/RelicData"));
const axios_utils_1 = require("../utils/axios_utils");
const StarRailUser_1 = __importDefault(require("../models/StarRailUser"));
const enka_system_1 = require("enka-system");
const StarRailCharacterBuild_1 = __importDefault(require("../models/enka/StarRailCharacterBuild"));
const defaultImageBaseUrls = [
    {
        filePath: "UPPER_CAMEL_CASE",
        priority: 5,
        regexList: [/.*/],
        url: "https://enka.network/ui/hsr",
    },
    {
        filePath: "LOWER_CASE",
        priority: 4,
        regexList: [
            /^SpriteOutput\/(AvatarShopIcon|AvatarRoundIcon|AvatarDrawCard|RelicFigures|ItemFigures|LightConeMaxFigures|LightConeMediumIcon)\/(.+)\.webp/,
            /^UI\/UI3D\/Rank\/_dependencies\/Textures\/\d+\/\d+_Rank_[1-6].webp/,
        ],
        url: "https://api.hakush.in/hsr/UI",
        customParser: (path) => path.replace(/^(spriteoutput|ui\/ui3d)\//, ""),
    },
];
/** @constant */
exports.defaultClientOption = {
    userAgent: "Mozilla/5.0",
    cacheDirectory: null,
    showFetchCacheLog: true,
    requestTimeout: 3000,
    defaultLanguage: "en",
    imageBaseUrls: [...defaultImageBaseUrls],
    githubToken: null,
    apiBaseUrl: "https://enka.network/api/hsr/uid",
    enkaSystem: null,
};
/**
 * @en StarRail
 */
class StarRail {
    getUser(data) {
        const fixedData = (0, config_file_js_1.renameKeys)(data, { "player_info": "detailInfo" });
        return new StarRailUser_1.default(fixedData, this);
    }
    getCharacterBuild(data, username, hash) {
        return new StarRailCharacterBuild_1.default(data, this, username, hash);
    }
    /**
     * @param options
     */
    constructor(options) {
        this.hoyoType = 1;
        const mergedOptions = (0, config_file_js_1.bindOptions)(exports.defaultClientOption, options);
        if (!mergedOptions.enkaSystem) {
            if (enka_system_1.EnkaSystem.instance.getLibrary(this.hoyoType)) {
                mergedOptions.enkaSystem = new enka_system_1.EnkaSystem();
            }
            else {
                mergedOptions.enkaSystem = enka_system_1.EnkaSystem.instance;
            }
        }
        this.options = mergedOptions;
        this.cachedAssetsManager = new CachedAssetsManager_1.default(this);
        this.options.enkaSystem.registerLibrary(this);
    }
    /**
     * @param uid
     * @throws {EnkaNetworkError}
     */
    async fetchUser(uid) {
        if (isNaN(Number(uid)))
            throw new Error("Parameter `uid` must be a number or a string number.");
        const baseUrl = this.options.apiBaseUrl;
        const url = `${baseUrl}/${uid}`;
        // TODO: data caching
        const response = await (0, axios_utils_1.fetchJSON)(url, this, true);
        if (response.status !== 200) {
            switch (response.status) {
                case 400:
                    throw new enka_system_1.InvalidUidFormatError(Number(uid), response.status, response.statusText);
                case 424:
                    throw new enka_system_1.EnkaNetworkError("Request to enka.network failed because it is under maintenance.", response.status, response.statusText);
                case 429:
                    throw new enka_system_1.EnkaNetworkError("Rate Limit reached. You reached enka.network's rate limit. Please try again in a few minutes.", response.status, response.statusText);
                case 404:
                    throw new enka_system_1.UserNotFoundError(`User with uid ${uid} was not found. Please check whether the uid is correct. If you find the uid is correct, it may be a internal server error.`, response.status, response.statusText);
                default:
                    throw new enka_system_1.EnkaNetworkError(`Request failed with unknown status code ${response.status} - ${response.statusText}\nError Detail: ${response.data["detail"]}\nRequest url: ${url}`, response.status, response.statusText);
            }
        }
        else if (response.data["retcode"]) {
            // only for mihomo api
            switch (response.data["retcode"]) {
                case 3612:
                    throw new enka_system_1.UserNotFoundError(`User with uid ${uid} was not found. Please check whether the uid is correct. If you find the uid is correct, it may be a internal server error.`, response.status, response.statusText);
                default:
                    throw new Error(`Unknown server error occurred. ErrorCode(retcode): ${response.data["retcode"]}`);
            }
        }
        return new StarRailUser_1.default(Object.assign({}, response.data), this);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @returns the starrail accounts added to the Enka.Network account
     */
    async fetchEnkaStarRailAccounts(username) {
        return await this.options.enkaSystem.fetchEnkaGameAccounts(username, [1]);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash EnkaGameAccount hash
     * @returns the starrail account with provided hash
     */
    async fetchEnkaStarRailAccount(username, hash) {
        return await this.options.enkaSystem.fetchEnkaGameAccount(username, hash);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash EnkaGameAccount hash
     * @returns the starrail character builds including saved builds in Enka.Network account
     */
    async fetchEnkaStarRailBuilds(username, hash) {
        return await this.options.enkaSystem.fetchEnkaCharacterBuilds(username, hash);
    }
    /**
     * @param playableOnly
     * @returns all character data
     */
    getAllCharacters(playableOnly = true) {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager.getStarRailCacheData("AvatarConfig")).filterObject((_, c) => (playableOnly && c.getAsNumber("AdventurePlayerID") === c.getAsNumber("AvatarID")) || !playableOnly).map(([, c]) => new CharacterData_1.default(c.getAsNumber("AvatarID"), this));
    }
    /**
     * @param excludeTestLightCones
     * @returns all light cone data
     */
    getAllLightCones(excludeTestLightCones = true) {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager.getStarRailCacheData("EquipmentConfig")).filterObject((_, lc) => (excludeTestLightCones && lc.has("AvatarBaseType")) || !excludeTestLightCones).map(([, lc]) => new LightConeData_1.default(lc.getAsNumber("EquipmentID"), this));
    }
    /**
     * @returns all relic data
     */
    getAllRelics() {
        return new config_file_js_1.JsonReader(this.cachedAssetsManager.getStarRailCacheData("RelicConfig")).mapObject((_, relic) => new RelicData_1.default(relic.getAsNumber("ID"), this));
    }
}
exports.default = StarRail;
