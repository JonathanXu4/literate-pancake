/// <reference types="node" />
import { ConfigFile, JsonObject } from "config_file.js";
import ObjectKeysManager from "./ObjectKeysManager";
import StarRail from "./StarRail";
/** @typedef */
export type NullableLanguageMap = {
    [key in LanguageCode]: {
        [key: string]: string;
    } | null;
};
/** @typedef */
export type LanguageMap = {
    [key in LanguageCode]: {
        [key: string]: string;
    };
};
/**
 * @en LanguageCode
 * @typedef
 */
export type LanguageCode = "chs" | "cht" | "de" | "en" | "es" | "fr" | "id" | "jp" | "kr" | "pt" | "ru" | "th" | "vi";
/**
 * @en CachedAssetsManager
 */
declare class CachedAssetsManager {
    /** The client that instantiated this */
    readonly client: StarRail;
    /** Default path of StarRail cache data directory */
    readonly defaultCacheDirectoryPath: string;
    /** List of the names of the files this library uses */
    readonly _contentsSrc: string[];
    /** List of supported languages */
    readonly _langs: string[];
    /** Path of directory where StarRail cache data is stored */
    cacheDirectoryPath: string;
    _cacheUpdater: NodeJS.Timer | null;
    _githubCache: ConfigFile | null;
    _isFetching: boolean;
    /**
     * @param client
    */
    constructor(client: StarRail);
    /** Create the necessary folders and files, and if the directory [cacheDirectoryPath](#cacheDirectoryPath) did not exist, move the cache files from the default path. */
    cacheDirectorySetup(): Promise<void>;
    /** Obtains a text map for a specific language. */
    fetchLanguageData(lang: LanguageCode): Promise<{
        [key: string]: string;
    }>;
    /**
     * @param useRawStarRailData Whether to fetch from github repo ({@link https://github.com/Dimbreath/StarRailData}) instead of downloading cache.zip
     * @returns Whether the game data update is available or not.
     */
    checkForUpdates(useRawStarRailData?: boolean): Promise<boolean>;
    /**
     * @param options.useRawStarRailData Whether to fetch from github repo ({@link https://github.com/Dimbreath/StarRailData}) instead of downloading cache.zip
     * @param options.ghproxy Whether to use ghproxy.com
     */
    fetchAllContents(options: {
        useRawStarRailData?: boolean;
        ghproxy?: boolean;
    }): Promise<void>;
    /**
     * @returns whether all StarRail cache data files exist.
     */
    hasAllContents(): boolean;
    /**
     * @param options.useRawStarRailData Whether to fetch from github repo ({@link https://github.com/Dimbreath/StarRailData}) instead of downloading cache.zip
     * @param options.ghproxy Whether to use ghproxy.com
     * @returns true if there were any updates, false if there were no updates.
     */
    updateContents(options?: {
        useRawStarRailData?: boolean;
        ghproxy?: boolean;
        onUpdateStart?: () => Promise<void>;
        onUpdateEnd?: () => Promise<void>;
    }): Promise<void>;
    /**
     * @param options.useRawStarRailData Whether to fetch from github repo ({@link https://github.com/Dimbreath/StarRailData}) instead of downloading cache.zip
     * @param options.ghproxy Whether to use ghproxy.com
     * @param options.timeout in milliseconds
     */
    activateAutoCacheUpdater(options?: {
        useRawStarRailData?: boolean;
        instant?: boolean;
        ghproxy?: boolean;
        timeout?: number;
        onUpdateStart?: () => Promise<void>;
        onUpdateEnd?: () => Promise<void>;
        onError?: (error: Error) => Promise<void>;
    }): void;
    /**
     * Disables the updater activated by [activateAutoCacheUpdater](#activateAutoCacheUpdater)
     */
    deactivateAutoCacheUpdater(): void;
    /**
     * @param lang
     * @returns text map file path for a specific language
     */
    getLanguageDataPath(lang: LanguageCode): string;
    /**
     * @param name without extensions (.json)
     * @returns excel bin file path
     */
    getJSONDataPath(name: string): string;
    /**
     * @param name without extensions (.json)
     */
    getStarRailCacheData(name: string): {
        [key: string]: JsonObject;
    };
    /**
     * @param lang
     * @returns text map for a specific language
     */
    getLanguageData(lang: LanguageCode): {
        [key: string]: string;
    };
    /**
     * @returns ObjectKeysManager of this
     */
    getObjectKeysManager(): ObjectKeysManager;
    /**
     * Clean memory of cache data.
     * Then reload data that was loaded before the clean if `reload` is true.
     * If `reload` is false, load each file as needed.
     */
    refreshAllData(reload?: boolean): void;
    /**
     * Remove all unused text map entries
     * @param data
     * @param langsData
     */
    removeUnusedTextData(data: {
        [s: string]: {
            [s: string]: JsonObject;
        };
    }, langsData: LanguageMap, showLog?: boolean): LanguageMap;
    /**
     * Download the zip file, which contains StarRail cache data, from {@link https://raw.githubusercontent.com/yuko1101/starrail.js/main/cache.zip}
     * @param options.ghproxy Whether to use ghproxy.com
     */
    _downloadCacheZip(options?: {
        ghproxy?: boolean;
    }): Promise<void>;
}
export default CachedAssetsManager;
