import { JsonObject } from "config_file.js";
import CachedAssetsManager, { LanguageCode } from "./CachedAssetsManager";
import CharacterData from "../models/character/CharacterData";
import { ImageBaseUrl } from "../models/assets/ImageAssets";
import LightConeData from "../models/light_cone/LightConeData";
import RelicData from "../models/relic/RelicData";
import StarRailUser from "../models/StarRailUser";
import { EnkaLibrary, EnkaSystem, EnkaGameAccount } from "enka-system";
import StarRailCharacterBuild from "../models/enka/StarRailCharacterBuild";
import { Overwrite } from "../utils/ts_utils";
/** @typedef */
export interface ClientOptions {
    userAgent: string;
    cacheDirectory: string | null;
    showFetchCacheLog: boolean;
    requestTimeout: number;
    defaultLanguage: LanguageCode;
    imageBaseUrls: ImageBaseUrl[];
    githubToken: string | null;
    /** This will be used for fetching user data by uid. */
    apiBaseUrl: "https://enka.network/api/hsr/uid" | "https://api.mihomo.me/sr_info" | string;
    readonly enkaSystem: EnkaSystem;
}
/** @constant */
export declare const defaultClientOption: Overwrite<ClientOptions, {
    "enkaSystem": EnkaSystem | null;
}>;
/**
 * @en StarRail
 */
declare class StarRail implements EnkaLibrary<StarRailUser, StarRailCharacterBuild> {
    readonly hoyoType: 1;
    getUser(data: JsonObject): StarRailUser;
    getCharacterBuild(data: JsonObject, username: string, hash: string): StarRailCharacterBuild;
    /** The options the client was instantiated with */
    readonly options: ClientOptions;
    /**  */
    readonly cachedAssetsManager: CachedAssetsManager;
    /**
     * @param options
     */
    constructor(options: Partial<ClientOptions>);
    /**
     * @param uid
     * @throws {EnkaNetworkError}
     */
    fetchUser(uid: number | string): Promise<StarRailUser>;
    /**
     * @param username enka.network username, not in-game nickname
     * @returns the starrail accounts added to the Enka.Network account
     */
    fetchEnkaStarRailAccounts(username: string): Promise<EnkaGameAccount<StarRail>[]>;
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash EnkaGameAccount hash
     * @returns the starrail account with provided hash
     */
    fetchEnkaStarRailAccount(username: string, hash: string): Promise<EnkaGameAccount<StarRail>>;
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash EnkaGameAccount hash
     * @returns the starrail character builds including saved builds in Enka.Network account
     */
    fetchEnkaStarRailBuilds(username: string, hash: string): Promise<{
        [characterId: string]: StarRailCharacterBuild[];
    }>;
    /**
     * @param playableOnly
     * @returns all character data
     */
    getAllCharacters(playableOnly?: boolean): CharacterData[];
    /**
     * @param excludeTestLightCones
     * @returns all light cone data
     */
    getAllLightCones(excludeTestLightCones?: boolean): LightConeData[];
    /**
     * @returns all relic data
     */
    getAllRelics(): RelicData[];
}
export default StarRail;
