"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = __importDefault(require("../../errors/AssetsNotFoundError"));
const TextAssets_1 = __importDefault(require("../assets/TextAssets"));
const Path_1 = __importDefault(require("../Path"));
const LightConeExpType_1 = __importDefault(require("./LightConeExpType"));
const ImageAssets_1 = __importDefault(require("../assets/ImageAssets"));
const LightConeSuperimposition_1 = __importDefault(require("./LightConeSuperimposition"));
const StatProperty_1 = require("../StatProperty");
/**
 * @en LightConeData
 */
class LightConeData {
    /**
     * @param id
     * @param client
     */
    constructor(id, client) {
        this.id = id;
        this.client = client;
        const _data = client.cachedAssetsManager.getStarRailCacheData("EquipmentConfig")[this.id];
        if (!_data)
            throw new AssetsNotFoundError_1.default("LightCone", this.id);
        this._data = _data;
        const _itemData = client.cachedAssetsManager.getStarRailCacheData("ItemConfigEquipment")[this.id];
        if (!_itemData)
            throw new AssetsNotFoundError_1.default("LightCone Item", this.id);
        this._itemData = _itemData;
        const json = new config_file_js_1.JsonReader(this._data);
        const itemJson = new config_file_js_1.JsonReader(this._itemData);
        this.name = new TextAssets_1.default(json.getAsNumber("EquipmentName", "Hash"), this.client);
        this.description = new TextAssets_1.default(itemJson.getAsNumber("ItemBGDesc", "Hash"), this.client);
        this.itemDescription = new TextAssets_1.default(itemJson.getAsNumber("ItemDesc", "Hash"), this.client);
        this.stars = Number(json.getAsString("Rarity").slice(-1));
        this.path = new Path_1.default(json.getAsStringWithDefault("Unknown", "AvatarBaseType"), this.client);
        this.maxAscension = json.getAsNumber("MaxPromotion");
        this.maxSuperimposition = json.getAsNumber("MaxRank");
        const skillId = json.getAsNumber("SkillID");
        const superimpositions = [];
        for (let i = 1; i <= this.maxSuperimposition; i++) {
            superimpositions.push(new LightConeSuperimposition_1.default(skillId, i, this.client));
        }
        this.superimpositions = superimpositions;
        this.expType = new LightConeExpType_1.default(json.getAsNumber("ExpType"), this.client);
        this.expProvide = json.getAsNumber("ExpProvide");
        this.coinCost = json.getAsNumber("CoinCost");
        this.icon = new ImageAssets_1.default(json.getAsString("ThumbnailPath"), this.client);
        this.cardImage = new ImageAssets_1.default(json.getAsString("ImagePath"), this.client);
    }
    /**
     * @param ascension
     * @param level
     */
    getStatsByLevel(ascension, level) {
        const ascensionData = this.client.cachedAssetsManager.getStarRailCacheData("EquipmentPromotionConfig")[this.id][ascension];
        const ascensionJson = new config_file_js_1.JsonReader(ascensionData);
        return [
            new StatProperty_1.StatPropertyValue("BaseHP", ascensionJson.getAsNumber("BaseHP", "Value") + ascensionJson.getAsNumber("BaseHPAdd", "Value") * (level - 1), this.client),
            new StatProperty_1.StatPropertyValue("BaseAttack", ascensionJson.getAsNumber("BaseAttack", "Value") + ascensionJson.getAsNumber("BaseAttackAdd", "Value") * (level - 1), this.client),
            new StatProperty_1.StatPropertyValue("BaseDefence", ascensionJson.getAsNumber("BaseDefence", "Value") + ascensionJson.getAsNumber("BaseDefenceAdd", "Value") * (level - 1), this.client),
        ];
    }
    /**
     * @param superimposition
     */
    getSuperimpositionStats(superimposition) {
        return this.superimpositions[superimposition - 1].stats;
    }
}
exports.default = LightConeData;
