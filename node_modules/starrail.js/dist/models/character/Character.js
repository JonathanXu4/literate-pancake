"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const CharacterData_1 = __importDefault(require("./CharacterData"));
const LightCone_1 = __importDefault(require("../light_cone/LightCone"));
const Relic_1 = __importDefault(require("../relic/Relic"));
const SkillTreeNode_1 = __importDefault(require("./skill/SkillTreeNode"));
const StatProperty_1 = require("../StatProperty");
const CharacterStats_1 = __importDefault(require("./CharacterStats"));
const SkillLevel_1 = __importDefault(require("./skill/SkillLevel"));
const ts_utils_1 = require("../../utils/ts_utils");
/**
 * @en Character
 */
class Character {
    /**
     * @param data
     * @param client
     */
    constructor(data, client) {
        this.client = client;
        this._data = data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.characterData = new CharacterData_1.default(json.getAsNumber("avatarId"), this.client);
        this.lightCone = json.has("equipment", "tid") ? new LightCone_1.default(json.getAsJsonObject("equipment"), this.client) : null;
        this.relics = json.getAsJsonArrayWithDefault([], "relicList").map(relic => new Relic_1.default(relic, this.client));
        this.level = json.getAsNumber("level");
        this.exp = json.getAsNumberWithDefault(0, "exp");
        this.ascension = json.getAsNumberWithDefault(0, "promotion");
        this.eidolons = json.getAsNumberWithDefault(0, "rank");
        const unlockedEidolons = this.characterData.eidolons.slice(0, this.eidolons);
        this.skillTreeNodes = json.get("skillTreeList").mapArray((_, skill) => {
            const node = new SkillTreeNode_1.default(skill.getAsNumber("pointId"), this.client);
            const levelUpByEidolons = node.levelUpSkills.length > 0 ? unlockedEidolons.reduce((levels, eidolon) => { var _a, _b; return levels + ((_b = (_a = eidolon.skillsLevelUp[node.levelUpSkills[0].id]) === null || _a === void 0 ? void 0 : _a.levelUp) !== null && _b !== void 0 ? _b : 0); }, 0) : 0;
            const level = new SkillLevel_1.default(skill.getAsNumber("level"), levelUpByEidolons);
            return node.getSkillTreeNodeByLevel(level);
        });
        this.skills = this.characterData.skills.map(skill => {
            var _a;
            const skillNode = this.skillTreeNodes.find(node => node.levelUpSkills.some(s => s.id === skill.id));
            // set default level to (1, 0) for "MazeNormal" skills.
            const level = (_a = skillNode === null || skillNode === void 0 ? void 0 : skillNode.level) !== null && _a !== void 0 ? _a : new SkillLevel_1.default(1, 0);
            return skill.getSkillByLevel(level);
        }).filter(ts_utils_1.nonNullable);
        this.basicStats = [
            ...this.characterData.getStatsByLevel(this.ascension, this.level),
            new StatProperty_1.StatPropertyValue("SPRatioBase", 1, this.client),
            new StatProperty_1.StatPropertyValue("MaxSP", this.characterData.maxEnergy, this.client),
        ];
        this.stats = new CharacterStats_1.default(this);
    }
}
exports.default = Character;
