"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = __importDefault(require("../errors/AssetsNotFoundError"));
const ImageAssets_1 = __importDefault(require("./assets/ImageAssets"));
const TextAssets_1 = __importDefault(require("./assets/TextAssets"));
const CharacterData_1 = __importDefault(require("./character/CharacterData"));
/**
 * @en UserIcon
 */
class UserIcon {
    /**
     * @param id
     * @param client
     */
    constructor(id, client) {
        this.id = id;
        this.client = client;
        let playerIconItem = this.client.cachedAssetsManager.getStarRailCacheData("ItemConfigAvatarPlayerIcon")[this.id];
        const isCharacterIcon = !!playerIconItem;
        if (!playerIconItem) {
            const otherPlayerIcon = this.client.cachedAssetsManager.getStarRailCacheData("ItemPlayerCard")[this.id];
            if (!otherPlayerIcon)
                throw new AssetsNotFoundError_1.default("UserIcon-Item", this.id);
            playerIconItem = otherPlayerIcon;
        }
        const itemJson = new config_file_js_1.JsonReader(playerIconItem);
        this._itemData = itemJson.getAsJsonObject();
        const playerIcon = this.client.cachedAssetsManager.getStarRailCacheData(isCharacterIcon ? "AvatarPlayerIcon" : "PlayerIcon")[this.id];
        if (!playerIcon)
            throw new AssetsNotFoundError_1.default("UserIcon-Icon", this.id);
        const iconJson = new config_file_js_1.JsonReader(playerIcon);
        this._iconData = iconJson.getAsJsonObject();
        this.name = new TextAssets_1.default(itemJson.getAsNumber("ItemName", "Hash"), this.client);
        this.icon = new ImageAssets_1.default(iconJson.getAsString("ImagePath"), this.client);
        this.itemIcon = new ImageAssets_1.default(itemJson.getAsString("ItemIconPath"), this.client);
        this.figureIcon = new ImageAssets_1.default(itemJson.getAsString("ItemFigureIconPath"), this.client);
        this.characterData = isCharacterIcon ? new CharacterData_1.default(iconJson.getAsNumber("AvatarID"), this.client) : null;
    }
}
exports.default = UserIcon;
