"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = __importDefault(require("../../errors/AssetsNotFoundError"));
const TextAssets_1 = __importDefault(require("../assets/TextAssets"));
const ImageAssets_1 = __importDefault(require("../assets/ImageAssets"));
const RelicSetBonus_1 = __importDefault(require("./RelicSetBonus"));
const RelicData_1 = __importDefault(require("./RelicData"));
/**
 * @en RelicSet
 */
class RelicSet {
    /**
     * @param id
     * @param client
     */
    constructor(id, client) {
        this.id = id;
        this.client = client;
        const _data = client.cachedAssetsManager.getStarRailCacheData("RelicSetConfig")[this.id];
        if (!_data)
            throw new AssetsNotFoundError_1.default("RelicSet", this.id);
        this._data = _data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.name = new TextAssets_1.default(json.getAsNumber("SetName", "Hash"), this.client);
        this.icon = new ImageAssets_1.default(json.getAsString("SetIconPath"), this.client);
        this.figureIcon = new ImageAssets_1.default(json.getAsString("SetIconFigurePath"), this.client);
        this.setBonus = json.get("SetSkillList").mapArray((_, needCount) => new RelicSetBonus_1.default(this.id, needCount.getAsNumber(), this.client));
    }
    /**
    * @param relics
    */
    static getActiveSetBonus(relics) {
        const relicSets = relics.map(a => (a instanceof RelicSet) ? a : (a instanceof RelicData_1.default) ? a.set : a.relicData.set);
        const separated = (0, config_file_js_1.separateByValue)(relicSets, a => a.id.toString());
        const relicSetCounts = Object.values(separated).map(array => { return { count: array.length, set: array[0] }; });
        return relicSetCounts.map(obj => {
            return {
                set: obj.set,
                count: obj.count,
                activeBonus: obj.set.setBonus.filter(bonus => bonus.needCount <= obj.count),
            };
        }).sort((a, b) => b.count - a.count);
    }
}
exports.default = RelicSet;
