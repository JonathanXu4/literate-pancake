"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const enka_system_1 = require("enka-system");
const Character_1 = __importDefault(require("./character/Character"));
const UserIcon_1 = __importDefault(require("./UserIcon"));
/** @extends {User} */
class StarRailUser extends enka_system_1.User {
    /**
     * @param data
     * @param client
     */
    constructor(data, client) {
        var _a;
        const json = new config_file_js_1.JsonReader(data);
        super(json);
        this.client = client;
        const detailInfo = json.get("detailInfo");
        this.uid = (_a = detailInfo.getAsNumberWithDefault(null, "uid")) !== null && _a !== void 0 ? _a : Number(json.getValue("uid"));
        this.nickname = detailInfo.getAsString("nickname");
        this.signature = detailInfo.getAsStringWithDefault(null, "signature");
        this.icon = new UserIcon_1.default(detailInfo.getAsNumber("headIcon"), this.client);
        this.level = detailInfo.getAsNumber("level");
        this.equilibriumLevel = detailInfo.getAsNumberWithDefault(0, "worldLevel");
        let platform = detailInfo.getValue("platform");
        if (platform === 11)
            platform = "PS5";
        this.platform = (platform !== null && platform !== void 0 ? platform : null);
        this.playStationAccount = ((detailInfo.has("platformAccountId") || detailInfo.has("unk1")) && (detailInfo.has("platformNickname") || detailInfo.has("unk3"))) ? {
            onlineId: detailInfo.has("platformAccountId") ? detailInfo.getAsString("platformAccountId") : detailInfo.getAsString("unk1"),
            nickname: detailInfo.has("platformNickname") ? detailInfo.getAsString("platformNickname") : detailInfo.getAsString("unk3"),
        } : null;
        this.friends = detailInfo.getAsNumberWithDefault(0, "friendCount");
        const recordInfo = detailInfo.get("recordInfo");
        this.achievements = recordInfo.getAsNumberWithDefault(0, "achievementCount");
        this.characterCount = recordInfo.getAsNumber("avatarCount");
        this.lightConeCount = recordInfo.getAsNumberWithDefault(0, "equipmentCount");
        const challengeInfo = recordInfo.get("challengeInfo");
        this.forgottenHall = challengeInfo.has("noneScheduleMaxLevel") ? {
            memory: challengeInfo.getAsNumber("noneScheduleMaxLevel"),
            memoryOfChaos: challengeInfo.getAsNumberWithDefault(0, "scheduleMaxLevel"),
            memoryOfChaosId: challengeInfo.getAsNumberWithDefault(null, "scheduleGroupId"),
        } : null;
        this.simulatedUniverse = recordInfo.getAsNumberWithDefault(0, "maxRogueChallengeScore");
        this.starfaringCompanions = detailInfo.getAsJsonArrayWithDefault([], "avatarDetailList").map(c => new Character_1.default(c, this.client));
        this.supportCharacter = (() => {
            if (detailInfo.has("assistAvatarDetail"))
                return new Character_1.default(detailInfo.getAsJsonObject("assistAvatarDetail"), this.client);
            const fromStarfaringCompanions = this.starfaringCompanions.find(c => c._data["_assist"]);
            if (fromStarfaringCompanions) {
                this.starfaringCompanions.splice(this.starfaringCompanions.indexOf(fromStarfaringCompanions), 1);
                return fromStarfaringCompanions;
            }
            return null;
        })();
        this.enkaUserHash = json.getAsStringWithDefault(null, "owner", "hash");
    }
    /**  */
    getCharacters() {
        const characters = [...this.starfaringCompanions];
        const supportCharacter = this.supportCharacter;
        if (supportCharacter && characters.some(c => c.characterData.id === supportCharacter.characterData.id)) {
            characters.push(supportCharacter);
        }
        return characters;
    }
}
exports.default = StarRailUser;
